var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MenuExample = function (_React$Component) {
    _inherits(MenuExample, _React$Component);

    function MenuExample() {
        _classCallCheck(this, MenuExample);

        var _this = _possibleConstructorReturn(this, (MenuExample.__proto__ || Object.getPrototypeOf(MenuExample)).call(this));

        _this.state = { focused: 0 };
        return _this;
    }

    _createClass(MenuExample, [{
        key: 'clicked',
        value: function clicked(index) {
            this.setState({ focused: index });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return React.createElement(
                'div',
                null,
                React.createElement(
                    'ul',
                    null,
                    this.props.items.map(function (m, index) {
                        var style = '';
                        if (_this2.state.focused == index) {
                            style = 'focused';
                        }
                        return React.createElement(
                            'li',
                            { className: style, onClick: _this2.clicked.bind(_this2, index) },
                            m
                        );
                    })
                ),
                React.createElement(
                    'p',
                    null,
                    'Selected: ',
                    this.props.items[this.state.focused]
                )
            );
        }
    }]);

    return MenuExample;
}(React.Component);

ReactDOM.render(React.createElement(MenuExample, { items: ['Home', 'Blog', 'Services', 'About', 'Contact us'] }), document.getElementById('root'));